#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('tetris:server');
var http = require('http');
var session = require('../server_classes/config/sessions');
var promise = require('bluebird');

var options = {
    // Initialization Options
    promiseLib: promise
};
var config = require('../server_classes/config/globals');
var sessions = require('../server_classes/config/sessions');
var pgp = require('pg-promise')(options);
/* Local database connection */
var dbConnLocal = config.DATABASE_PROVIDER + config.DATABASE_USERNAME + ":" +
    config.DATABASE_PASSWORD + config.DATABASE_URL + config.DATABASE_NAME

/* Heroku database connection */
var dbConnHeroku = config.DATABASE_HEROKU_URL

/* modify connection depending if you are in local or heroku database */
var db = pgp(dbConnLocal);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var chatSocket = require('../server_classes/sockets/chatSocket.js');

/**
 * Listen on provided port, on all network interfaces.
 */

/* Socket IO implementation for chat in gameplay page */

var io = require('socket.io').listen(server.listen(port));

server.on('error', onError);
server.on('listening', onListening);
var users = {};
var gameUsers = {};
var games = {};
var interval;
var countdown = 15;
var scoreid = 'score';
var resetScore = false;


io.on('connection', function (socket) {


    /* Connect the chat socket server to the backend of this app */

    var gameChat = new chatSocket();
    gameChat.connect(io, socket, users, games);

    /*
     * MULTI PLAYER GAME LOGIC STARTS HERE
     */

    // Executed when a user tries to join a specific game
    // Will determine if the player joined to a specific room will
    // play in single player or multi player mode. Also, it will determine
    // who is the next player to play.
    socket.on('joinGame', function (room) {
        var playerSession, playersInRoom, opponent, scoreDescriptor;

        socket.join(room);

        gameUsers[socket.id] = {
            socketid: socket.id, gameid: room, playerid: session.USER_SESSION,
            name: session.USER_SESSION_NAME, opponent: null,
            isPlaying: false, scoreid: "score", score: 0, scoreDescriptor: ""
        };
        playerSession = gameUsers[socket.id]; // the player who is using the socket
        playersInRoom = io.sockets.adapter.rooms[room].sockets; // gets all the players for this room
        opponent = null;
        console.log('******* ' + playerSession.name + ' just joined to game: ' + room)
        // iterates over all the players in this specific room
        for (var playerid in playersInRoom) {
            if (playerid != socket.id) // this player is the opponent and multi player game is set
            {
                opponent = gameUsers[playerid]; // the opponent
                playerSession.scoreid = "score2";
                playerSession.opponent = opponent; // sets opponent for the actual player
                opponent.opponent = playerSession; // sets actual player as the opponent of the opponent
                playerSession.isPlaying = true; // the actual player is
            }
        }

        if (playerSession.opponent == null) // single player session
        {
            score1 = 0;
            playerSession.isPlaying = true;
            io.sockets.in(room).emit('addPlayerToGame', false, playerSession.name + " is playing in single player mode", {
                playername: playerSession.name,
                opponent: "",
                playerid: session.USER_SESSION});
            playerSession.scoreDescriptor = "player1";
        }
        else // multi player session
        {
            score2 = 0;
            playerSession.scoreDescriptor = "player2";
            io.sockets.in(room).emit('addPlayerToGame', true, playerSession.name + " Vs " + opponent.name,
                {playername: playerSession.name, opponent: opponent.name, playerid: session.USER_SESSION});
            io.sockets.in(room).emit("nextPlayer", {
                name: playerSession.name,
                socketid: playerSession.socketid,
                playerid: playerSession.playerid
            });

        }

        socket.on("disconnect", function () {
            delete gameUsers[socket.id];
            isGameFull(db, 0, room);
            console.log("user left the room");
        });
    });

    // Once single player or multiplayer mode is determined, the game will start
    socket.on("onGame", function (room) {

        io.sockets.in(room).emit('playGame', room);
    })

    // Construct the timer and resets it when a player finish its round
    // in multiplayer mode. For single player mode, the timer will stay static
    socket.on("resetTimer", function (room, score) {
        var player1 = gameUsers[socket.id];
        var player2, nextPlayer;
        if (player1.opponent != null) // single player
        {
            player2 = player1.opponent;
            clearInterval(interval);
            countdown = 15;
            interval = setInterval(function () {
                countdown--;
                if (countdown == -1) {
                    countdown = 15;
                    if (player1.isPlaying == true) {
                        scoreid = 'score2'
                        player2.isPlaying = true;
                        player1.isPlaying = false;
                        nextPlayer = player2;

                    }
                    else if (player2.isPlaying == true) {
                        scoreid = 'score'
                        player1.isPlaying = true;
                        player2.isPlaying = false;
                        nextPlayer = player1;

                    }
                    resetScore = true;
                    console.log(nextPlayer.name + " is next player");
                    io.sockets.in(room).emit("nextPlayer", {
                        name: nextPlayer.name,
                        socketid: nextPlayer.socketid,
                        id: nextPlayer.playerid,
                        score: nextPlayer.score
                    });

                }
                io.sockets.in(room).emit('updateTimer', countdown);

            }, 1000);
        }
    })


    socket.on("nextRound", function (data) {

    })

    // After the game is done in multi player mode, this socket action will
    // save the best score of the game into the database
    socket.on('updateScore', function (score, gameid) {
        io.emit('updateScore', score, gameid);

        console.log("Outside Score in gameid: " + gameid + ' updated to ' + score);
        db.none('update games set totalscore=$1 where id=$2',
            [parseInt(score), parseInt(gameid)])
            .then(function () {
                console.log("Score in gameid: " + gameid + ' updated to ' + score);
            })
            .catch(function (err) {
                console.log(err);
            });
    });

    socket.on("isGameFull", function (room, value) {
        isGameFull(db, value, room);
    })
    // Determines the next key that was clicked.
    socket.on('nextKey', function (code) {
        console.log("user clicked a key: " + code);
        io.sockets.emit('nextKey', code);
    })

    socket.on("updatePlayerScore", function (data) {
        var player = gameUsers[socket.id];
        if (resetScore == true) {
            resetScore = false;

        }
        player.score = data.score;
        io.sockets.in(data.room).emit("score", {room: data.room, score: player.score, scoreid: scoreid});

    })

    socket.on("endOfGame", function (room) {
        io.sockets.in(room).emit("end", room);
        clearInterval(interval);


    })

    socket.on("winner", function (room, winnerData) {
        saveWinnerScoreInDatabase(db, winnerData.winnerid, winnerData.score);

    })


});

function isGameFull(db, value, room) {
    db.none('update games set isfull=$1 where id=$2',
        [value, parseInt(room)])
        .then(function () {
            if (value == 0) {
                console.log("game: " + room + " is not full");
            }
            else {
                console.log("game: " + room + " is now full");
            }
        })
        .catch(function (err) {
            console.log(err);
        });
}


function saveWinnerScoreInDatabase (db, winnerid, winnerScore)
{
    console.log("winner score: " + winnerScore + " id: " + winnerid);
    db.none('update users set score=$1 where id=$2',
        [winnerScore, parseInt(winnerid)])
        .then(function () {
            console.log("winner score with id: " + winnerid + " was updated to: " + winnerScore);
        })
        .catch(function (err) {
            console.log(err);
        });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

