#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('tetris:server');
var http = require('http');
var session = require('../server_classes/config/sessions');
var promise = require('bluebird');


var options = {
    // Initialization Options
    promiseLib: promise
};
var config = require('../server_classes/config/globals');
var sessions = require('../server_classes/config/sessions');
var pgp = require('pg-promise')(options);
/* Local database connection */
var dbConnLocal = config.DATABASE_PROVIDER + config.DATABASE_USERNAME + ":" +
    config.DATABASE_PASSWORD + config.DATABASE_URL + config.DATABASE_NAME

/* Heroku database connection */
var dbConnHeroku = config.DATABASE_HEROKU_URL

/* modify connection depending if you are in local or heroku database */
var db = pgp(dbConnLocal);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


/* Socket IO implementation for chat in gameplay page */

var io = require('socket.io').listen(server.listen(port));
server.on('error', onError);
server.on('listening', onListening);
var users = {};
var gameUsers = {};
var socketIndex = 0;

io.on('connection', function(socket)
{
  socket.on('connected', function(userName)
  {
    users[socket.id] = userName;
    io.emit('new', '*** ' + userName + ' joined the chat. ***');
    //io.emit('new-users', users);
  });

  socket.on('chat message', function(msg)
  {
    io.emit('chat message', users[socket.id], msg);

    console.log('message: ' + msg);
  });
  /* for multiplayer logic */
  socket.on('multiplayer', function(gameid)
  {
    io.emit('multiplayer', users[socket.id], gameid);
    gameUsers[socket.id] = gameid;
    socketIndex++;
    console.log('Users joined to tetris so far: ' + socketIndex + '\n' +
        'Last user id joined to multiplayer tetris game: ' + session.USER_SESSION + "\n" +
        'Gameid joined: ' + gameid);

  });

  socket.on('updateScore', function(score, gameid)
  {
      io.emit('updateScore', score, gameid);
    /* GET users listing. */

      db.none('update games set totalscore=$1 where id=$2',
          [parseInt(score), parseInt(gameid)])
          .then(function () {
              console.log("Score in gameid: " +  gameid + ' updated to ' + score);
          })
          .catch(function (err) {
              console.log(err);
          });




  })

  socket.on('disconnect', function()
  {
    io.emit('new', '*** ' + users[socket.id] + ' left the chat. ***');
    delete users[socket.id];
    //io.emit('new-users', users);
  })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
