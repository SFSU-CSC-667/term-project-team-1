#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('tetris:server');
var http = require('http');
var session = require('../server_classes/config/sessions');
var promise = require('bluebird');


var options = {
    // Initialization Options
    promiseLib: promise
};
var config = require('../server_classes/config/globals');
var sessions = require('../server_classes/config/sessions');
var pgp = require('pg-promise')(options);
/* Local database connection */
var dbConnLocal = config.DATABASE_PROVIDER + config.DATABASE_USERNAME + ":" +
    config.DATABASE_PASSWORD + config.DATABASE_URL + config.DATABASE_NAME

/* Heroku database connection */
var dbConnHeroku = config.DATABASE_HEROKU_URL

/* modify connection depending if you are in local or heroku database */
var db = pgp(dbConnHeroku);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


/* Socket IO implementation for chat in gameplay page */

var io = require('socket.io').listen(server.listen(port));

server.on('error', onError);
server.on('listening', onListening);
var users = {};
var gameUsers = {};
var games = {};
var socketIndex = 0;
var playerIndexPerRoom = 1;
var playerJoined = "";
var interval;
var countdown = 30;



io.on('connection', function (socket) {



    socket.on('connected', function (userName, room) {
        users[socket.id] = userName;
        io.emit('update', '*** ' + userName + ' joined the chat. ***');
        io.emit('update', userName + " joined the server.");
        //io.emit('update-users', users);

        socket.on('disconnect', function () {
            io.emit('update', '*** ' + users[socket.id] + ' left the chat. ***');
            io.emit('update', userName + " left the server.");
            console.log('*** ' + users[socket.id] + ' left the chat. ***');
            delete users[socket.id];
            delete  game[room];
            socketIndex--;
            //io.emit('update-users', users);
        });
    });


    socket.on('chat message', function (msg) {
        io.emit('chat message', users[socket.id], msg);
        console.log('message: ' + users[socket.id] + ':' + msg);
    });

    /*
     * MULTI PLAYER GAME LOGIC STARTS HERE
     */

    // Executed when a user tries to join a specific game
    socket.on('joinGame', function(room) {
            var clientsInThisGame;
            var player1;
            var player2;
            var numberOfClientsInThisGame = 0;

            socket.join(room);

            // Array structure to hold user information during the game.
            games[room] = { whoIsPlaying: socket.id};
            gameUsers[socket.id] = {
                gameid: room, id: session.USER_SESSION, socket: socket.id,
                name: session.USER_SESSION_NAME, opponent: null, willPlayFirst: false, nextPlayer: null,
                isPlaying: false
            };

            clientsInThisGame = io.sockets.adapter.rooms[room].sockets;

            // iterate over all the existing clients in this room
            for (var clientId in clientsInThisGame) {
                if (clientId != socket.id) {
                     player2 = gameUsers[socket.id].name;
                     player1 = gameUsers[clientId].name;
                     gameUsers[socket.id].nextPlayer = clientId;
                     gameUsers[clientId].nextPlayer = socket.id;
                     socket.broadcast.to(clientId).emit("userJoined", player2);
                     io.sockets.in(room).emit('addPlayerToGame', player1 + " Vs " + player2);
                }
                numberOfClientsInThisGame++;
            }

            if (numberOfClientsInThisGame == 1)
            {
                io.sockets.in(room).emit('addPlayerToGame', session.USER_SESSION_NAME + " Vs Waiting for more players...");
                gameUsers[socket.id].willPlayFirst = true;

            }

            io.sockets.in(room).emit("nextPlayer", session.USER_SESSION_NAME, games[room].whoIsPlaying);


    });


    socket.on("onGame", function (room) {
        io.sockets.in(room).emit('playGame', room);

    })


    socket.on("resetTimer", function (room) {

          clearInterval(interval);
          countdown = 60;
          var playingNow;
          var nextPlayer;
          var nextPlayerName;
          interval = setInterval(function () {
                  countdown--;
                  if (countdown == -1)
                  {
                        countdown = 60;
                        playingNow = games[room].whoIsPlaying;
                        nextPlayer = gameUsers[playingNow].nextPlayer;
                        nextPlayerName = gameUsers[nextPlayer].name;
                        io.sockets.in(room).emit("nextPlayer", nextPlayerName, games[room].whoIsPlaying);
                        games[room].whoIsPlaying = nextPlayer;
                  }
                  io.sockets.in(room).emit('updateTimer', countdown);

              }, 1000);
    })


    socket.on("nextRound", function (data) {

    })

    socket.on('updateScore', function (score, gameid) {
        io.emit('updateScore', score, gameid);
        /* GET users listing. */
        console.log("Outside Score in gameid: " + gameid + ' updated to ' + score);
        db.none('update games set totalscore=$1 where id=$2',
            [parseInt(score), parseInt(gameid)])
            .then(function () {
                console.log("Score in gameid: " + gameid + ' updated to ' + score);
            })
            .catch(function (err) {
                console.log(err);
            });
    });

    socket.on('nextKey', function (code) {
        console.log("user clicked a key: " + code);
        io.sockets.emit('nextKey', code);
    })






});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

