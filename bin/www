#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('tetris:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


/* Socket IO implementation for chat in gameplay page */

var io = require('socket.io').listen(server.listen(port));
server.on('error', onError);
server.on('listening', onListening);
var users = {};

io.on('connection', function(socket)
{
  socket.on('connected', function(userName)
  {
    users[socket.id] = userName;
    io.emit('new', '*** ' + userName + ' joined the chat. ***');
    io.emit('new-users', users);
  });

  socket.on('chat message', function(msg)
  {
    io.emit('chat message', users[socket.id], msg);

    console.log('message: ' + msg);
  });

  socket.on('disconnect', function()
  {
    io.emit('new', '*** ' + users[socket.id] + ' left the chat. ***');
    delete users[socket.id];
    io.emit('new-users', users);
  })
});

/* Socket io implementation for a user who just wants to join to the game */
var gameio = require('socket.io').listen(server.listen(port));
server.on('error', onError);
server.on('listening', onListening);
var users = {};
/* Connection events */

gameio.on('connection', function(socket) {
    console.log('New user connected');

    socket.on('game', function (player) {
        console.log(player + ' joined the game');
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
